# defining the name of the workflow (Containerizing the Image and deploying it to ECS) ==> Continuous Delivery
name: Deploy to Amazon EC2

# specifying this workflow will get triggered if we push anything to the main branch
on:
  push:
    branches:
       - main

# adding environment variables
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: propensity_flask_app
  ECS_CLUSTER: customer_propensity_flask_app
  ECS_SERVICE: customer_propensity_flask_app
  ECS_TASK_DEFINITION: propensity-app-task-definition
  CONTAINER_NAME: propensity_flask_app
  SERVER_PUBLIC_IP: ec2-3-94-103-223.compute-1.amazonaws.com


# defining the jobs
jobs:
  # defining job1
  job1:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python 3
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install -r requirements_dev.txt
      
      - name: Run tests with pytest
        run: pytest test.py

  # defining job2 which requires job1
  job2:
    needs: job1
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      # Add the provided lines here
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@b8c74de753fbcb4868bf2011fb2e15826ce973af
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ env.AWS_REGION }}
      
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}
          region:  ${{env.AWS_REGION}}
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        
      - name: Build, tag, push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image = $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Set ECR Registry URL
        run: echo "::set-output name=ECR_REGISTRY::${{ steps.login-ecr.outputs.registry }}"
        id: set-ecr-registry

      - name: Set ECR Repository Name
        run: echo "::set-output name=ECR_REPOSITORY::propensity_flask_app"
        id: set-ecr-repository

      - name: Set Docker Image Tag
        run: echo "::set-output name=IMAGE_TAG::${{ github.sha }}"
        id: set-image-tag


      - name: Deploy docker image from ECR to EC2 instance
        id: deploy-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{env.SERVER_PUBLIC_IP}}
          username: ubuntu
          key: ${{secrets.PRIVATE_SSH_KEY}}
          script: |
              whoami
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 851725554615.dkr.ecr.us-east-1.amazonaws.com
              docker pull 851725554615.dkr.ecr.us-east-1.amazonaws.com/propensity_flask_app:cbc58edd0910a98e2de381b72c48f6f6567a4bb6;
              # Check for existing processes using port 5000
              PORT_IN_USE=$(netstat -tuln | grep ":5000")
              if [ -n "$PORT_IN_USE" ]; then
                echo "Port 5000 is already in use. Killing conflicting process..."
                # Find the PID of the process using port 5000 and kill it
                PID=$(lsof -t -i:5000)
                if [ -n "$PID" ]; then
                  kill -9 $PID
                fi
              else
                echo "Port 5000 is not in use"
              fi
              # Run the Docker container
              docker run -d -p 5000:5000 851725554615.dkr.ecr.us-east-1.amazonaws.com/propensity_flask_app:cbc58edd0910a98e2de381b72c48f6f6567a4bb6;


      

      
