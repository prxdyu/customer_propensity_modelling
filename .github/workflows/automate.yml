# defining the name of the workflow (Containerizing the Image and deploying it to ECS) ==> Continuous Delivery
name: Deploy to Amazon EC2

# specifying this workflow will get triggered if we push anything to the main branch
on:
  push:
    branches:
       - main

# adding environment variables
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: propensity_flask_app
  ECS_CLUSTER: customer_propensity_flask_app
  ECS_SERVICE: customer_propensity_flask_app
  ECS_TASK_DEFINITION: propensity-app-task-definition
  CONTAINER_NAME: propensity_flask_app
  SERVER_PUBLIC_IP: ec2-3-94-103-223.compute-1.amazonaws.com


# defining the jobs
jobs:
  # defining job1
  job1:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python 3
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install -r requirements_dev.txt
      
      - name: Run tests with pytest
        run: pytest test.py

  # defining job2 which requires job1
  job2:
    needs: job1
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      # Add the provided lines here
      - name: Print AWS Secrets
        run: |
          echo "AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@b8c74de753fbcb4868bf2011fb2e15826ce973af
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ env.AWS_REGION }}
      
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}
          region:  ${{env.AWS_REGION}}
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        
      - name: Build, tag, push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image = $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Deploy docker image from ECR to EC2 instance
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{env.SERVER_PUBLIC_IP}}
          username: ubuntu
          key: b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn
NhAAAAAwEAAQAAAQEAup1ZLF/zE7eysXGCsYGVsY6K78TFDedpCT5iVtk97EeYLH0s0nNJ
lBUhPwT/Def6VpzcPBRdXRJ4ZkEwNs+lDGlQV4MTzc6jwHfMZApso6WJQxKSlBRQncFaZk
f0Lqg5Q0xYDByu/Ao0b+67uJVYyHjaHJHHjnQKcmGqqkDuZxJW3ZK/52HgvmO5eQa9B/SR
diSHLhZAs5zr893ljRLkjPH0UIJvzJSqgxizwyw796Kz5f19OmGonLEGjajOn6xi2gJuHK
kYOWaOeizb/KNlcpYsNPXmSaHXHjt7xAnWM5G89+Pkfgy+wfF26+1XQFGI0Mqi/DcEPlZg
vYw7aWHJKQAAA9Dq/aH+6v2h/gAAAAdzc2gtcnNhAAABAQC6nVksX/MTt7KxcYKxgZWxjo
rvxMUN52kJPmJW2T3sR5gsfSzSc0mUFSE/BP8N5/pWnNw8FF1dEnhmQTA2z6UMaVBXgxPN
zqPAd8xkCmyjpYlDEpKUFFCdwVpmR/QuqDlDTFgMHK78CjRv7ru4lVjIeNockceOdApyYa
qqQO5nElbdkr/nYeC+Y7l5Br0H9JF2JIcuFkCznOvz3eWNEuSM8fRQgm/MlKqDGLPDLDv3
orPl/X06YaicsQaNqM6frGLaAm4cqRg5Zo56LNv8o2Vyliw09eZJodceO3vECdYzkbz34+
R+DL7B8Xbr7VdAUYjQyqL8NwQ+VmC9jDtpYckpAAAAAwEAAQAAAQBYUS9quN4pbr67C6V2
rIVTysomP1GjCunC3itcPuP3dsqmA3e7AaTI2FcrpAmxYyAu7X2tUVX+PkeM3T0cM5lBDn
ZfdEFjHXCSHiA1GFnh+O3FOHz2Z8bfYiqOTW9axXKUTwU8dja6QXofnzRoXwXtmoRfEP8I
hBKNn3tNp/0r+cpJeglTtGD5NJuS2fVQ+5uBQu1P36ignbwA1pepTBpQ5XVb8Xi9U7VgRg
BwpaRKu4wutfL73MD/PoDM0powWjFfVmPVr6Xt/rSQt+SAQJIvZjml9++jpZwxFrJy5OtZ
BPEZk/AxvRwJU4GbgXMoZ0zvtBjY5LPEic/bCTRmhBSBAAAAgFYQDfJOEkRvsNCrVnDuFz
Z6VNmD62uU0pcXYOD0Fth7QLR+ffJhpnEK5SWjvpmCThx9y9E/7fzVbpBhM0Z0zL0RnX8R
vzyRWLOmUbAMLnd05jTdG13V9ruZXKsRpR/gFN1eNiyt0mDVOI7aHSXmeNIhasLvbwXA1C
FvaUqLReT9AAAAgQDuVQ+ZubofRZr3+CrJozWkOt6zWirQhFnr2pZznwGwivCbHP8+gFQc
Fz4xr3JpUAB/Sx4z4R8Kx2Fc+b+vN8ZIeStW5if9FO9L0XH4KSZ7OO5ylq7meDx/iDs/Si
xC9x5Lv6Awm6YzgNNEXRr/NTx9WUyQYew5wRpzcSPoJ8bQRQAAAIEAyHLRkfVqkq0Zq3Qi
u+dYrK37BtiiAhwPdWFtzfovjB4BCF5PUe1DgWFkkmXRSff+dX6HDk1xZFqQkelTcJlRyN
FsjrHBIC4iUvkvMUdUWiWlAllk/zGw4d1KOibe2B92EOTCqiGMRAU7bL0mWH1+HwUehacO
ZpMtGZCbs5jT3ZUAAAAUcHJhZHl1XHByYWR5dUBQcmFkeXUBAgMEBQYH
          script: |
              whoami
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 851725554615.dkr.ecr.us-east-1.amazonaws.com              docker pull 
              docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              docker run -d -p 5000:5000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        env:
          SSH_DEBUG: true
  


      

      
